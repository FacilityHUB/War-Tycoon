local VirtualInputManager = game:GetService("VirtualInputManager")
local runS = game:GetService("RunService")
local pl = game:GetService("Players")
local lp = pl.LocalPlayer
local char = lp.Character or lp.CharacterAdded:Wait()
local ws = game:GetService("Workspace")
local camera = workspace.CurrentCamera
local UIS = game:GetService("UserInputService")
local mousePPos = UIS:GetMouseLocation()
runS.RenderStepped:Connect(function()
    mousePPos = UIS:GetMouseLocation()
end)

_G.Center = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

_G.FullSettings = {
    AimBot = {
        Checks = {
            TeamCheck = true,
            WallCheck = true,
            AliveCheck = true,
        },
        Fov = {
            Enable = true,
            Visible = true,
            Thickness = 0.6,
            Color = Color3.fromRGB(255, 255, 255),
            LockColor = Color3.fromRGB(255, 0, 0),
            OffColor = Color3.fromRGB(150, 150, 150),
            Filled = false,
            Size = 160,
        },
    },
}

do -- Aimbot
    local FOV = Drawing.new("Circle")
    FOV.Visible = _G.FullSettings.AimBot.Fov.Visible
    FOV.Visible = _G.FullSettings.AimBot.Fov.Enable
    FOV.Thickness = _G.FullSettings.AimBot.Fov.Thickness
    FOV.Color = _G.FullSettings.AimBot.Fov.Color
    FOV.Filled = _G.FullSettings.AimBot.Fov.Filled
    FOV.Radius = _G.FullSettings.AimBot.Fov.Size
    FOV.Position = mousePPos

    runS.RenderStepped:Connect(function()
        FOV.Position = mousePPos
    end)

    coroutine.wrap(function()
        local lock = false

        local function GetPartToFov(Part)
            for _, v in ipairs(pl:GetPlayers()) do
                if v ~= lp and v.Character and v.Character:FindFirstChild(Part) then
                    if
                        _G.FullSettings.AimBot.Checks.AliveCheck
                        and v.Character:FindFirstChildOfClass("Humanoid")
                        and v.Character.Humanoid.Health <= 0
                    then
                        continue
                    end

                    local ray = workspace:FindPartOnRayWithIgnoreList(
                        Ray.new(
                            camera.CFrame.Position,
                            (v.Character[Part].Position - camera.CFrame.Position).Unit
                                * (v.Character[Part].Position - camera.CFrame.Position).Magnitude
                        ),
                        { lp.Character, camera }
                    )

                    if _G.FullSettings.AimBot.Checks.WallCheck and (not ray or not ray:IsDescendantOf(v.Character)) then
                        continue
                    end
                    if
                        _G.FullSettings.AimBot.Checks.TeamCheck
                        and v.Character:FindFirstChild("HumanoidRootPart")
                        and v.Character.HumanoidRootPart:FindFirstChild("TeammateLabel")
                    then
                        continue
                    end
                    local vPos = camera:WorldToViewportPoint(v.Character[Part].Position)
                    local distance = (Vector2.new(vPos.X, vPos.Y) - mousePPos).Magnitude

                    if _G.FullSettings.AimBot.Fov.Enable and (distance > _G.FullSettings.AimBot.Fov.Size) then
                        continue
                    end
                    return v
                end
            end
        end

        while task.wait() do
            if _G.FullSettings.AimBot.Fov.Enable then
                if not lp.PlayerGui.MainGui.MainFrame.Lobby.Currency.Visible then
                    local Target = nil
                    Target = GetPartToFov("Head") -- Utiliser "Head" directement ici

                    if Target ~= nil then
                        FOV.Color = _G.FullSettings.AimBot.Fov.LockColor
                    else
                        FOV.Color = _G.FullSettings.AimBot.Fov.Color
                    end

                    if not Target then
                        FOV.Color = _G.FullSettings.AimBot.Fov.OffColor
                    end

                    if
                        Target
                        and Target.Character
                        and Target.Character:FindFirstChild("Head")
                        and lock
                        and camera:WorldToViewportPoint(
                                Target.Character["Head"].Position
                            ).Z
                            > 0
                    then
                        camera.CFrame = CFrame.new(
                            camera.CFrame.Position
                                + (
                                        Target.Character["Head"].Position
                                        - camera.CFrame.Position
                                    ).Unit
                                    * 0.5,
                            Target.Character["Head"].Position
                        )

                        VirtualInputManager:SendMouseButtonEvent(_G.Center.X, _G.Center.Y, 0, true, game, 0)
                        task.wait()
                        VirtualInputManager:SendMouseButtonEvent(_G.Center.X, _G.Center.Y, 0, false, game, 0)
                    end
                end
            end
        end
    end)()
end
