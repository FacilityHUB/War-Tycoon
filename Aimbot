local Aimbot = {}

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Cam = workspace.CurrentCamera

Aimbot.Configuration = {
    TeamCheck = false,
    WallCheck = false,
    AliveCheck = false,
    FovCheck = false,

    Fov = false,
    Visible = false,
    Thickness = 0.6,
    Color = Color3.fromRGB(255, 255, 255),
    LockColor = Color3.fromRGB(255, 0, 0),
    OffColor = Color3.fromRGB(150, 150, 150),
    Filled = false,
    Size = 100,

    SelectedPart = { "Head" },
    maxDistance = 2000,
    sensitivity = 0.1,
    AimBotEnabled = false,
    aimbotActive = false,
    AimToggleMode = false,
    AimKey = Enum.UserInputType.MouseButton2,
    Priority = "Cursor",
    aimpredictions = false,
    predictionTime = 0.1
}

local FOV = Drawing.new("Circle")
Aimbot.FOV = FOV
FOV.Visible = Aimbot.Configuration.Visible
FOV.Thickness = Aimbot.Configuration.Thickness
FOV.Color = Aimbot.Configuration.Color
FOV.Filled = Aimbot.Configuration.Filled
FOV.Radius = Aimbot.Configuration.Size
FOV.Position = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)


local currentTargetPart = Aimbot.Configuration.SelectedPart[1]

local function findTargetPart(player, targetPartName)
    if not player.Character or not targetPartName then return nil end
    for _, descendant in ipairs(player.Character:GetDescendants()) do
        if descendant:IsA("BasePart") and descendant.Name == targetPartName then
            return descendant
        end
    end
    return nil
end

local function predictPosition(targetPart)
    if not targetPart or not targetPart:IsA("BasePart") then return nil end
    if Aimbot.Configuration.aimpredictions then
        return targetPart.Position + targetPart.Velocity * Aimbot.Configuration.predictionTime
    end
    return targetPart.Position
end

local function alignCameraToTarget(targetPosition)
    Cam.CFrame = CFrame.new(Cam.CFrame.Position, targetPosition)
end

local function isInFOV(targetPosition)
    local screenPosition, isVisible = Cam:WorldToViewportPoint(targetPosition)
    local distanceFromCenter = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)).Magnitude
    return isVisible and distanceFromCenter <= FOV.Radius
end

local function getClosestPlayer(trg_part)
    local nearest, lastDistance = nil, Aimbot.Configuration.maxDistance
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local part = findTargetPart(player, trg_part)
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if part and humanoid and humanoid.Health > 0 then
                local distanceFromPlayer = (Cam.CFrame.Position - part.Position).Magnitude
                if not Aimbot.Configuration.FovCheck or isInFOV(part.Position) then
                    if distanceFromPlayer < lastDistance then
                        nearest, lastDistance = player, distanceFromPlayer
                    end
                end
            end
        end
    end
    return nearest
end

local function getTargetPlayer()
    return getClosestPlayer(currentTargetPart)
end

function Aimbot.Load()
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Aimbot.Configuration.AimKey and Aimbot.Configuration.AimBotEnabled then
            if Aimbot.Configuration.AimToggleMode then
                Aimbot.Configuration.aimbotActive = not Aimbot.Configuration.aimbotActive
            else
                Aimbot.Configuration.aimbotActive = true
            end
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Aimbot.Configuration.AimKey and not Aimbot.Configuration.AimToggleMode and Aimbot.Configuration.AimBotEnabled then
            Aimbot.Configuration.aimbotActive = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        FOV.Position = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)
        if Aimbot.Configuration.aimbotActive then
            local closest = getTargetPlayer()
            if closest and closest.Character:FindFirstChild(currentTargetPart, true) then
                local targetPartInstance = closest.Character:FindFirstChild(currentTargetPart, true)
                local predictedPosition = predictPosition(targetPartInstance)
                FOV.Color = Aimbot.Configuration.LockColor
                alignCameraToTarget(predictedPosition)
            else
                FOV.Color = Aimbot.Configuration.Color
            end
        else
            FOV.Color = Aimbot.Configuration.Color
        end
    end)
end

return Aimbot

--[[ Exemple Pour l'utiliser
local Aimbot = loadstring(game:HttpGet('https://raw.githubusercontent.com/FacilityHUB/UI-AfterLath/refs/heads/main/Test'))()

Aimbot.Configuration.TeamCheck = true
Aimbot.FOV.Visible = true
Aimbot.Load()
--]]
